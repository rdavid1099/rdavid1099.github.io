var mediumPosts,
    about = {},
    stubbedPosts = {
      "items": [
        {
            "title": "Getting the Most Out of a Coding School",
            "pubDate": "2017-02-01 23:33:48",
            "guid": "https://medium.com/p/bd1a9a130188",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RGxVZ6-6enMRtPCsMXMt3g.jpeg\"><figcaption>Turing School of Software and Design</figcaption></figure><p>If you’ve read any of my previous posts, you probably know that I am a recent graduate of the Turing School of Software and Design. After five years working as news producer for stations across the country, I decided to turn all of my energy into pursuing my passion of technology and problem solving. I enrolled in Turing without really knowing what I was getting into. Granted, I did my research, sat down with staff members and knew that I wanted to learn how to code, but that didn’t fully prepare me for the exciting journey that lay ahead of me.</p>\n<p>Coding schools, also known as “coding bootcamps,” are all about shoveling as much information into your brain to get you ready for an entry-level job in the tech field. While the schools are a form of adult-education, they operate completely different than any formal education I have ever received. The speed and intensity of what you learn is at a whole other level, and unless you are wholly committed to growing and learning, success will be near impossible to achieve.</p>\n<p>Before diving into some of the techniques I picked up to succeed, let me quickly lay out some of my education history to give you a basis. I was never a “straight-A student.” While I always enjoyed school and had a passion for learning, the standard education system did not work well with my personality. I worked my way through high-school as a pretty average student and proceeded to take five years of college to get my journalism degree. It wasn’t until I hit my mid-twenties that I gained a real hunger for growth and knowledge, and thankfully, Turing’s teaching style and curriculum provided exactly what I was looking for. My point being, you don’t have to be a “smart” or “straight-A” student to succeed at a place like Turing, you just need to want it… Which leads me perfectly until some of my acquired techniques.</p>\n<p><strong>Remember Your Passion</strong> — All of us have different reasons for making a career change and dumping tens-of-thousands of dollars into learning a new skill. Some of us have families to support, while others just simply want a career that has more sense of meaning and contribution. My reasoning is more of the latter. Producing news was great, I just didn’t have the passion that others did in my position and wanted to feel like I was making more of an impact on the community. The first few weeks after starting Turing, it was easy to spend 18 hours a day reading, coding and just consuming knowledge. I just recently quit my job, the whole experience was brand new and my brain couldn’t get enough of it. As months go by, however, it’s easy to fall into the trap of “routine.” I noticed more and more students complain about the amount of work they were given and the amount of time they were spending at school. While I understood and empathized with their gripes, I had to step-back and remind myself the feeling I had weeks before starting and the overall goal of attending school. One of the main reasons I started this path is because I wanted more work and to learn, with that comes the tireless hours of studying and working through exercises.</p>\n<p><strong>Write Code</strong> — Okay… I know what you’re thinking… “Duh, I’m at a coding school, of course I have to write code.” And yeah, you’re right, but that doesn’t make it any less of an important technique to succeeding at a coding school. I think this point goes pretty much hand-in-hand with “remember your passion,” but while it’s easy to fly through hundreds of lines of code during the first month-or-so, more complex concepts and projects will quickly slow you down. What used to feel relatively easy, will become difficult and your pace will change significantly. At this point, I would find myself staring at a screen and getting frustrated that I’m not knocking out programs at the rate that I was initially. Do not let this feeling stop you from writing. If you hit a block while working on a project than find drills to work on or, better yet, head over to <a href=\"http://exercism.io/\">Exercism</a> and bust out one or two of its tasks. Not only does this keep you fresh on the basics, it also helps your brain step back from your one problem and work on something else. After getting a break from your prior project, you can head back and have a completely different perspective, possibly helping you get past that blocker. So… you kept writing code and now have this completed drill on your computer, what should you do with it?</p>\n<p><strong>Delete Your Code</strong> — This one’s weird, I know. This is one of Jeff Casimir’s, the founder of Turing School of Software and Design, favorite philosophies. When he first told us he wanted us to delete our code on a regular basis, I thought he was nuts. I’m there to learn how to write code, I wanted to keep all of it that I wrote. It wasn’t until I was reaching the middle of the program that I realized the genius in his logic. You’re never dumber and less skilled than you are today, and tomorrow you’ll look back at what you wrote and think there are at least ten other better ways to write this… so, go ahead and delete that crap and re-write it. Coding is no different than learning any other skill, it takes practice, time and dedication… did I mention practice…</p>\n<p><strong>Check Your Ego At The Door</strong> — We finally hit the one skill that I struggled with a lot. Everyone who enrolled in the school is there to learn, and despite what others say or what you think, all of us are new and none of us know what we’re doing. As you progress through the program, you will learn a lot and, if you’re anything like me, you’ll think you “figured it all out.” I can tell you, no one on this planet has figured it all out, that includes students who have only been coding for a few months. Keeping your ego in check will allow you to accept that there is more to learn, opening you up to asking more questions and learning from other students and instructors. I can’t emphasize this enough, in order to get the most out of your experience and education, you have to learn from others and know that you are far from being an expert.</p>\n<p><strong>Enjoy It</strong> — One final point I want to make is enjoy every second of it. Yes, it will be difficult at times and you may shed some tears, but learning is one of the greatest things anyone can do for themselves and every tear is worth it. Despite all of sleepless nights and stress induced by some of the bugs I have encountered, I have not once doubted my decision. Coding is tons of fun and can lead to great things for the world and your community. Love the learning experience and you’ll go far.</p>\n<p>I enrolled in Turing back in June of 2016 and graduated a little less than a month ago. I can tell you, going to Turing was one of the best decisions I ever made. If you are like me and decide to take the plunge and change careers, commit whole-heartedly and you will not be disappointed.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bd1a9a130188\" width=\"1\" height=\"1\">\n",
        },
        {
            "title": "Dealing with the Impostor Inside All of Us",
            "pubDate": "2017-01-25 22:52:34",
            "guid": "https://medium.com/p/9f0478bf14b1",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*uSUtX9jznONSPTAxRDONew.jpeg\"><figcaption>Coming face-to-face with one’s inner impostor</figcaption></figure><p>I recently graduated from the Denver-based code school Turing School of Software and Design, and it was the first time I came face-to-face with my impostor.</p>\n<p><strong>Impostor Syndrome</strong> is a term coined by psychologists back in 1978. It is essentially a way to describe the feeling many people get when they are unable to internalize their accomplishments and fear they will be discovered as being a fraud or impostor. Psychological research done in the early eighties suggests the syndrome occurs mostly in high-performing individuals with an estimated two out of five successful people suffering from it.</p>\n<p>Before Turing, I was unaware of impostor syndrome. While I experienced feelings of being a fraud throughout my years as a news producer, I never revealed the feelings, fearing they would expose that I “faked” my way to success. My first day at Turing, I remember specifically thinking that I fooled the staff and somehow just slipped through the application process and would soon show everyone why I didn’t belong in the program. Months went by, and despite my success and ability to quickly learn the new concepts, I still never felt like I actually deserved to be in the program. I joined a lunch group in the school where others who felt these feelings could share techniques of coping and changing one’s mindset.</p>\n<p>Since then, I have acquired several skills to deal with feeling like an impostor and ways to prove to yourself that you are accomplished and deserve to be in whatever situation that is causing you concern.</p>\n<p><strong>Track your progress and accomplishments</strong> — While this may sound a bit trite on the surface it’s easy to lose track of your accomplishments and dwell on failures. During my time at Turing, I found myself chalking successes up as fake, attributing them to ridiculous reasons (i.e. I made the instructor laugh, so, of course, they gave me good scores), while using failures as proof that I’m a fraud. This realization led me to begin keeping track of my successes. For months, I have saved all meaningful projects, reviews and feedback in a specific folder in my computer. While I don’t look at it that often, any time I start feeling like I am fooling the world around me, I open it up and remind myself of the journey I have taken to get here.</p>\n<p><strong>Don’t be afraid to reach out to others</strong> — Many people with impostor syndrome tend to have a similar mindset when it comes to reaching out for support. We believe asking for help or guidance is a sign that we’re faking our way through a situation. This thought process couldn’t be any further from the truth. I have found that many times I concealed my worries or concerns I came across as withdrawn leading those around me to become withdrawn and hurt productivity. Seeking support will not only help others become aware to your train of thought, it will also help ground your thoughts and shift your mindset. I have never once explained my thoughts of being a fraud to someone and had them affirm my concerns. This leads me directly to my next tip.</p>\n<p><strong>Remember we’re living in reality</strong> — This is a weird one, I know, but I find it extremely helpful. Many times I get lost within my head, trying to use logic and analytical thinking to problem solve emotional issues. As I have found out time and time again, logic and real-life don’t always play well together. Many people drawn to coding and the sciences are familiar with this thought-process. While using logic to solve problems is great for our craft, it can be hard to turn off and is not useful for solving emotional issues. When I start to have thoughts of being a fraud and begin to connect “logical dots” that confirm my suspicions, I have to step back and remember that my conclusions are not grounded in reality. Be sure to find healthy ways to de-rail your negative train of thought and bring you back to “real world.”</p>\n<p>Overall, impostor syndrome is a relatively common thought process and it is manageable to live with. It has been one of the many learning experiences I went through while attending Turing, and gaining the skills to deal with those thoughts in a healthy manner are invaluable.</p>\n<p>For more information on how to overcome impostor syndrome, I suggest you check out this <a href=\"https://hbr.org/2008/05/overcoming-imposter-syndrome\">Harvard Business Review article</a>, and you can find more information on the syndrome on the American Psychological Association’s <a href=\"http://www.apa.org/gradpsych/2013/11/fraud.aspx\">site</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9f0478bf14b1\" width=\"1\" height=\"1\">\n",
        },
        {
            "title": "A New Web Developer’s First Brownfield Experience",
            "pubDate": "2017-01-17 21:01:18",
            "guid": "https://medium.com/p/39d898bdba33",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DOLzBKzwHVK26LO9Wj1kuQ.jpeg\"></figure><p>Learning computer programming and web design is a lot like learning anything else, you tread water, slowly introducing new concepts to apply in common situations. A majority of my time at the Turing School of Software and Design was doing just that: learn a new concept, launch a new project and learn how to properly apply that concept. While I knew that a majority of my time in the working world would be consumed by working on existing codebases, otherwise known as brownfield projects, I was never too concerned and spent most of my time focusing on learning new concepts. All of that changed when I entered the final six weeks of the curriculum.</p>\n<p>As I worked on honing my back-end web development skills, I was presented a unique situation; I was asked to be an intern working with a small dev team at a Denver-based real estate company. I expressed my interest in raw Ruby and back-end coding to the CTO, that’s when I was given the task to convert the company’s internal file-storage API from using Box to use AWS S3. The first time I opened the project I was taken back by how much was happening and my complete lack of understanding and control of the codebase. Following the initial shock, I buckled down, scouring the API’s test suite and docs. I spent a whole day without writing nor deleting a single line of code.</p>\n<p>After gaining a complete understanding of what was happening, I began implementing S3 into the API. I started using scalpel, slowly cutting out small chunks and replacing them meticulously with specific methods and API calls. After nearly two days of making small progress, my scalpel became a machete, and I hacked out huge chunks and re-wrote everything. It took me about two weeks to completely convert the API and add the desired functionality.</p>\n<p>Completing that task left me with a lot of newfound insight on how to tackle a brownfield project and best complete the tasks at-hand. First, stress over having a complete understanding of how every single piece is working. I spent too much time understanding the API’s former file-storage process. What was the point of learning how to use the Box API within the internal API, if I was tasked to rip it out? This brings me to my second big takeaway, have a solid understanding of your goal and the paths that can get you there. Looking back, I could have saved myself and the company a lot of time if I stuck to completing the goal and wasn’t side-tracked by understanding the prior codebase. The senior developer said replace the Box API inside the codebase with the S3 API, this means, find anything that used that API and rip it out and rewrite it using S3. No part of that goal involves learning the Box API or how it’s currently functioning. Third, don’t be afraid of unfamiliar code. A common reaction to uncomfortable situations is to freeze up and become crippled. That’s how I initially dealt with the strange codebase, but, at the end of the day, it’s nothing more than a text document containing instructions for a computer. Embrace the unfamiliarity and start bending that code to do what you want.</p>\n<p>Since then, I have become much more comfortable with interacting with existing codebases. If you are a new web designer and have not dealt with a brownfield project, I implore you to find some interesting open-source projects on GitHub and just fork them and start messing with them. It’s an incredible experience and will help you greatly as you continue your coding journey.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=39d898bdba33\" width=\"1\" height=\"1\">\n",
        },
        {
            "title": "The Wonderful World of C# or: How I Learned to Stop Worrying and Love the Compiler",
            "pubDate": "2016-12-30 19:19:13",
            "guid": "https://medium.com/p/69a2f9216096",
            "description": "\n<p>Before we begin, let’s quickly take a quick trip down memory lane. I have spent the past five years working my way up the ranks of local news markets as a producer. Year-after-year, moving from city-to-city to bring my audience the most compelling stories and information. About six months ago, I became fed up with the way local news directors shoveled uninformative stories down communities’ throats and decided I wanted to do something about it. That’s when I came to the conclusion that learning how to code would be the best way to disrupt news markets.</p>\n<p>For the past six months, I have been attending the Turing School of Software and Design in Denver, Colorado, learning how produce and design basic Rails web apps. This, of course, means most of my experience has been in Ruby, a loosely-typed programming language. While I enjoy every second I am coding in Ruby, there is something to say about the lack of compiling and declaring variable data types.</p>\n<p>I recently started teaching myself how to make simple videos games using the Unity Game Engine and C#. Only knowing Ruby, it took me a while to get used to all the variable declarations and having a compiler yell at me for every little thing I tried to do, not to mention all of the curly-braces and semi-colons. But after a few weeks of messing around, and scouring dozens of documents, my comfort level increased and I ended up falling in love with the strongly-typed language.</p>\n<p>Unlike Ruby, C# will not allow any program to run unless it meets the strict criteria the language expects (such as declaring variable data types and the expected data return of methods). This essentially eliminates the need for simple tests, saving the one’s time and allowing one to knock out simple processes without being bogged down by a test suite. More importantly, I love the fact that my program refuses to run if there are simple errors, unlike Ruby, which will continue to execute until you hit the specific problem, which, depending on which paths you take, may not be hit.</p>\n<p>While I have not had as much practice or experience with C# as I have with Ruby, my initial exposure to the strongly-typed language has left me happy and wanting more. As I continue to learn and grow in my programming career, I’m excited to learn more strongly-typed languages and can’t wait to see the amazing things that can be created in these languages.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69a2f9216096\" width=\"1\" height=\"1\">\n",
        }
    ],
};

about.populateMedium = function() {
  // mediumPosts = stubbedPosts.payload.references.Post // REMOVE FORCED STUBS BEFORE DEPLOY
  $medium = document.getElementById('medium');
  mediumPosts ? loadRecentPosts($medium) : getRecentPosts($medium)
};

var loadRecentPosts = function($medium) {
  var innerHTML = '';
  mediumPosts.slice(0,4).forEach(function(post) {
    innerHTML += '<a href="' + post.guid + '" target="_blank">' +
                 '<div class="panel panel-default">' +
                   '<div class="panel-heading">' +
                     '<h5 class="panel-title">' + post.title + '</h5>' +
                   '</div>' +
                   '<div class="panel-body">' +
                     summarize(post.description) + '<br>' +
                     '<br><strong>' + convertTime(post.pubDate) + '</strong>' +
                   '</div>' +
                 '</div>' +
                 '</a>';
  });
  $medium.innerHTML = innerHTML;
};

var getRecentPosts = function($medium) {
  $.get( "https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Fmedium.com%2Ffeed%2F%40rdavid1099", function( data ) {
    console.log(data.items);
    mediumPosts = data.items;
  }).fail(function(err) {
    console.error('An error occurred, loading backup data.');
    mediumPosts = stubbedPosts.items;
  }).always(function() {
    loadRecentPosts($medium);
  });
};

var summarize = function(description) {
  var cleanText = $(description).filter('p')[0]
  var splitText = cleanText.innerText.split(' ').slice(0, 25).join(' ');
  return splitText + '...';
};